import datetime
import secrets
import os
from datetime import timezone
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_login import LoginManager

# Instead of importing from app, create the extensions here
db = SQLAlchemy()
migrate = Migrate()
login_manager = LoginManager()

def create_flask_app():
    """Create and configure the Flask application."""
    app = Flask(__name__, instance_relative_config=True)
    
    # Configuração do banco de dados
    app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY', 'chave-secreta-temporaria')
    app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL', 'sqlite:///app.db')
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
    
    # Disable CSRF protection completely
    app.config['WTF_CSRF_ENABLED'] = False
    
    # Initialize extensions
    db.init_app(app)
    migrate.init_app(app, db)
    
    # Setup login manager
    login_manager.init_app(app)
    login_manager.login_view = 'auth.login'
    login_manager.login_message = 'Por favor, faça login para acessar esta página.'
    login_manager.login_message_category = 'info'
    
    # Initialize login manager
    from app.models.user import init_login_manager
    init_login_manager(login_manager)
    
    # Register blueprints
    from app.routes.auth import auth
    from app.routes.main import main
    from app.routes.pacientes import pacientes
    from app.routes.tratamentos import tratamentos
    
    app.register_blueprint(auth, url_prefix='/auth')
    app.register_blueprint(main, url_prefix='/')
    app.register_blueprint(pacientes, url_prefix='/pacientes')
    app.register_blueprint(tratamentos, url_prefix='/tratamentos')
    
    return app

# Create the application instance
app = create_flask_app()

# Patient deletion route does not use CSRF protection


@app.context_processor
def inject_now():
    return {"now": datetime.datetime.now(timezone.utc)}


@app.context_processor
def inject_csp_nonce():
    """Provide a CSP nonce for templates"""
    nonce = secrets.token_hex(16)
    return {"csp_nonce": lambda: nonce}


if __name__ == "__main__":
    app.run(debug=True)
