"""
Lint and format all Python files in the project.

This script helps maintain code quality by running:
- black: Code formatter
- isort: Import organizer
- flake8: Style guide enforcement
- pylint: Code analysis
"""
import os
import shutil
import subprocess
import sys
from pathlib import Path


def check_tool_installed(tool_name):
    """Check if a tool is installed."""
    return shutil.which(tool_name) is not None


def run_command(command):
    """Run a shell command and print the output."""
    tool_name = command[0]

    if not check_tool_installed(tool_name):
        print(f"⚠️ {tool_name} is not installed. Skipping.")
        print(f"To install, run: pip install {tool_name}")
        return False

    print(f"Running: {' '.join(command)}")

    try:
        result = subprocess.run(command, capture_output=True, text=True, check=False)

        if result.stdout:
            print(result.stdout)

        if result.stderr and result.returncode != 0:
            print(f"Error: {result.stderr}")

        return result.returncode == 0
    except Exception as e:
        print(f"❌ Error executing {' '.join(command)}: {e}")
        return False


def find_python_files(directory):
    """Find all Python files in a directory and its subdirectories."""
    python_files = []
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(".py"):
                python_files.append(os.path.join(root, file))
    return python_files


def main():
    """Main function to run linting and formatting tools."""
    # Get the project root directory
    project_root = Path(__file__).parent.resolve()

    # Define directories to exclude
    exclude_dirs = ["venv", "env", "__pycache__", "migrations", ".git"]

    # Find all Python files
    python_files = find_python_files(project_root)

    # Filter out excluded directories
    python_files = [f for f in python_files if not any(excl in f for excl in exclude_dirs)]

    print(f"Found {len(python_files)} Python files to process")

    # Format with Black
    print("\n=== Running Black ===")
    black_success = run_command(["black", "--line-length", "100", *python_files])

    # Sort imports with isort
    print("\n=== Running isort ===")
    isort_success = run_command(["isort", "--profile", "black", "--line-length", "100", *python_files])

    # Lint with Flake8
    print("\n=== Running Flake8 ===")
    flake8_success = run_command(["flake8", "--max-line-length=100", *python_files])

    # Lint with Pylint
    print("\n=== Running Pylint ===")
    pylint_success = run_command(["pylint", "--max-line-length=100", *python_files])

    # Report results
    print("\n=== Results ===")
    print(f"Black: {'✅ Success' if black_success else '❌ Issues found'}")
    print(f"isort: {'✅ Success' if isort_success else '❌ Issues found'}")
    print(f"Flake8: {'✅ Success' if flake8_success else '❌ Issues found'}")
    print(f"Pylint: {'✅ Success' if pylint_success else '❌ Issues found'}")

    if not all([black_success, isort_success, flake8_success, pylint_success]):
        print("\n⚠️ Some linting issues were found. Please fix them before committing.")
        return 1
    else:
        print("\n✅ All linting checks passed successfully!")
        return 0


if __name__ == "__main__":
    sys.exit(main())
