import os\nimport sqlite3\nimport traceback\n\n\ndef main():\n    try:\n        # Ensure the instance directory exists\n        if not os.path.exists("instance"):\n            os.makedirs("instance")\n\n        # Connect to the database\n        print("Connecting to database...")\n        conn = sqlite3.connect("instance/app.db")\n        cursor = conn.cursor()\n\n        # Check the current structure\n        print("Checking current table structure...")\n        cursor.execute("PRAGMA table_info(procedimento)")\n        columns = cursor.fetchall()\n        column_names = [col[1] for col in columns]\n        print(f"Current columns: {column_names}")\n\n        # Check if 'tratamento_id' column exists\n        if "tratamento_id" not in column_names:\n            print("Adding 'tratamento_id' column to procedimento table...")\n            try:\n                cursor.execute(\n                    "ALTER TABLE procedimento ADD COLUMN tratamento_id INTEGER "\n                    "REFERENCES tratamento(id)"\n                )\n                conn.commit()\n                print("Column 'tratamento_id' added successfully!")\n            except sqlite3.Error as e:\n                print(f"Error adding column 'tratamento_id': {e}")\n        else:\n            print("Column 'tratamento_id' already exists.")\n\n        # Define all required columns from model\n        model_columns = [\n            "id",\n            "plano_id",\n            "tratamento_id",\n            "descricao",\n            "dente",\n            "dentes_selecionados",\n            "quadrantes",\n            "boca_completa",\n            "valor",\n            "status",\n            "data_prevista",\n            "data_realizado",\n            "observacoes",\n        ]\n\n        # Add any missing columns\n        for col in model_columns:\n            if col not in column_names and col != "id" and col != "tratamento_id":\n                print(f"Adding missing column '{col}' to procedimento table...")\n\n                # Determine column type based on model definition\n                if col == "dentes_selecionados" or col == "observacoes":\n                    col_type = "TEXT"\n                elif col == "boca_completa":\n                    col_type = "BOOLEAN DEFAULT 0"\n                elif col == "valor":\n                    col_type = "FLOAT DEFAULT 0.0"\n                elif col == "data_prevista" or col == "data_realizado":\n                    col_type = "DATE"\n                elif col == "quadrantes":\n                    col_type = "VARCHAR(20)"\n                else:\n                    col_type = "VARCHAR(100)"\n\n                try:\n                    cursor.execute(f"ALTER TABLE procedimento ADD COLUMN {col} {col_type}")\n                    conn.commit()\n                    print(f"Column '{col}' added successfully!")\n                except sqlite3.Error as e:\n                    print(f"Error adding column '{col}': {e}")\n\n        # Check for the 'valoor' column (typo)\n        if "valoor" in column_names and "valor" not in column_names:\n            print("Found 'valoor' column - fixing to 'valor'...")\n\n            try:\n                # Create a new table with the correct schema\n                cursor.execute(\n                    """\n                CREATE TABLE procedimento_new (\n                    id INTEGER PRIMARY KEY,\n                    plano_id INTEGER NOT NULL,\n                    tratamento_id INTEGER,\n                    descricao VARCHAR(200) NOT NULL,\n                    dente VARCHAR(100),\n                    dentes_selecionados TEXT,\n                    quadrantes VARCHAR(20),\n                    boca_completa BOOLEAN DEFAULT 0,\n                    valor FLOAT DEFAULT 0.0,\n                    status VARCHAR(20),\n                    data_prevista DATE,\n                    data_realizado DATE,\n                    observacoes TEXT,\n                    FOREIGN KEY (plano_id) REFERENCES plano_tratamento(id),\n                    FOREIGN KEY (tratamento_id) REFERENCES tratamento(id)\n                )\n                """\n                )\n\n                # Copy data from old table to new table, fixing column name\n                cursor.execute(\n                    """                                INSERT INTO procedimento_new
                (id, plano_id, descricao, dente, valor, 
                status, data_prevista, data_realizado, observacoes)
                SELECT id, plano_id, descricao, dente, 
                valoor, status, data_prevista, 
                data_realizado, observacoes
                FROM procedimento"""\n                )\n\n                # Drop old table and rename new one\n                cursor.execute("DROP TABLE procedimento")\n                cursor.execute("ALTER TABLE procedimento_new RENAME TO procedimento")\n\n                conn.commit()\n                print("Successfully fixed 'valoor' to 'valor'")\n            except sqlite3.Error as e:\n                print(f"Error fixing 'valoor' column: {e}")\n\n        # Final check of the table structure\n        cursor.execute("PRAGMA table_info(procedimento)")\n        final_columns = cursor.fetchall()\n        print("\nFinal procedimento table structure:")\n        for col in final_columns:\n            print(col)\n\n        conn.close()\n        print("\nDatabase schema update completed.")\n\n    except (sqlite3.Error, OSError) as e:\n        print(f"A database or file system error occurred: {e}")\n        traceback.print_exc()\n\n\nif __name__ == "__main__":\n    main()\n